=head1 NAME

Jifty::Manual::Tutorial - Jifty 從零開始

=head1 DESCRIPTION

這份教學文件將提供建構第一個 jifty 應用程式所需要的技巧。

=cut

=head1 HOW TO

=head2 The requirements

這就是你需要安裝的。

=head2 Installing Jifty

我們相當相信 DRY ( Don't Repeat Yourself ) 的原則，這是我們喜愛 Perl 與 CPAN 的一個很重要的原因。

Jifty 使用了 CPAN 上許多令人驚奇的程式碼。他直接使用 60 多個來自 CPAN 的模組 。

大部分的套件都是跨平台且只以 Perl 寫成的模組，且能在你可取得 Perl 的任何平台上良好運作。

我們花了很長的一段時間讓您能夠不用花上一整天的時間下載函式庫以及所有相關的套件。 

Jifty 的安裝程式能夠自動偵測您機器上尚未安裝的模組，並且直接下載並安裝他們。

別擔心，Jifty 在更動之前提醒你。

在大多數的系統上，你可以使用 Perl 所提供的 CPAN 模組來下載並且安裝 Jifty:

  # perl -MCPAN -e"install Jifty"

如果你下載了 Jifty 的 C<.tar.gz> 檔，您可以使用手動安裝:

  # tar xzvf jifty-<version>.tgz
  # cd jifty-<version>
  # perl Makefile.PL
  # make
  # make test
  # make install

我們會想要知道如果單元測試沒有通過的原因，如果您遇到了這樣的問題。
請加入我們的 C<jifty-devel@lists.jifty.org> 並回報相關的錯誤訊息。
關於如何加入我們，請參見下方的 L<GETTING HELP> 

=head2 Setting up the Scaffolding

一旦你完成了 Jifty 的安裝，便能開始構築你第一份 Jifty 應用程式。

Jifty 將所有的事情設計的相當簡單使用，你只需要使用 Jifty 提供的 F<jifty> 命令列工具來啟動您的應用程式
 ( 在您建構的應用程式裡的 F<bin/> 資料夾內 )

請切換到一個乾淨的目露底下來建立你的 Jifty 應用程式。 ( Jifty 會為您建立子資料夾 ).

  # jifty app --name MyWeblog
  Creating new application MyWeblog
  Creating directory lib
  Creating directory lib/MyWeblog
  Creating directory bin
  Creating directory etc
  Creating directory doc
  Creating directory log
  Creating directory var
  Creating directory var/mason
  Creating directory share
  Creating directory share/po
  Creating directory share/web
  Creating directory share/web/templates
  Creating directory share/web/static
  Creating directory lib/MyWeblog/Model
  Creating directory lib/MyWeblog/Action
  Creating directory t
  Creating configuration file MyWeblog/etc/config.yml

以下將逐一解說。

=over

=item bin

在 F<bin/> 資料夾內的便是 F<jifty>, 是 Jifty 用來處理 Jifty 指令的程式 . 

一些較重要的指令是 C<schema> , 這個指令用來設置或更新您的資料庫。
又如指令 C<server> , 這個指令將啟動獨立的網頁伺服器。 .

想知道其他 Jifty 提供的指令，可執行:

    jifty help

=item etc

Configuration files live in F<etc/>, though if you don't have a config
file, Jifty will supply some sane defaults.

=item doc

Jifty won't magically write your documentation for you, but when B<you>
write your docs, put them in F<doc/>.

=item log

Jifty uses L<Log::Log4perl> to configure its logging. By default, it
dumps logs named F<server.log> and F<error.log> into the F<log> directory.

=item var

Jifty stores cache files here while the server is running. You shouldn't ever
have to touch this directory.

=item share/web/po

Jifty supports internationalization. F<share/web/po/> is where your
translations ("portable object templates") will go.

=item share/web/templates

Though modern Jifty applications are encouraged to use L<Template::Declare>
for templating, we also support L<HTML::Mason> templates. Put your
application's Mason templates into F<share/web/templates/>. Out of the
box, Jifty comes with an application I<skeleton> that it installs in
F<share/web/templates/>. This default application is a convenient way to
get a basic application up and running quickly, but probably needs some
customization as you build a more advanced application.

You can find where Perl stuck Jifty's default templates with:

  perl -MJifty::Util -le 'print Jifty::Util->share_root'

=item share/web/static

Some nontrivial percentage of the content your web application serves
out doesn't need to (or I<shouldn't>) pass through your templating
engine.

Just drop your static files into F<share/web/static/> and Jifty will serve
them out if it can't find a template with the right name.

Out of the box, Jifty comes with a CSS style, Javascript libraries and a
Pony. Look in F<share/web/static> in the Jifty distribution, or in the same
place Jifty stuck its default templates.

=item lib/MyWeblog/Model

The real base of your application lives in
C<lib/MyWeblog/Model>. Classes here define your application's data
structures and how they relate to each other. Jifty will use your model
classes to set up and upgrade your database's schema when it needs to.

For a full treatment of the Jifty object model see
L<Jifty::Manual::ObjectModel>.

=item lib/MyWeblog/Action

Actions are an API for your model classes. One way you might think of them is
that an action is an HTML form, but generalized. Jifty will generate basic
database-interaction (C<CREATE>, C<READ>, C<UPDATE>, C<DELETE>) B<Actions> for
your B<Models> on-the-fly.

=item t

Jifty starts off your application with a basic harness, but can't yet write 
all your tests for you. (It does, however, build simple tests for model
classes you generate.)

=back

=head2 Building your data model

As you might imagine by the fact that this tutorial application is named
B<MyWeblog>, the example here is a simple weblog application.  Future
tutorials will add authentication, comments, and RSS and Atom feeds.

=head3 Posts

Weblogs tend to center around posts, so it's no surprise that the first model
to create is the C<post>:

  # cd MyWeblog
  # jifty model --name Post
  Writing file /tmp/MyWeblog/lib/MyWeblog/Model/Post.pm
  Writing file /tmp/MyWeblog/t/00-model-Post.t

Great! Now you have a B<Post> model (not that it models anything yet).

Open F<lib/MyWeblog/Model/Post.pm> in your favorite text editor.

You should see something like this:

  use strict;
  use warnings;
  
  package MyWeblog::Model::Post;
  use Jifty::DBI::Schema;
  
  use MyWeblog::Record schema {
  
  };
  
  # Your model-specific methods go here.
  
  1;


Now it's time to tell the model class about posts. Start by giving our post a
C<body> and a C<title>. (In a future tutorial, the application will become fully
folksonomy-compliant by adding a C<category> and upgrading that C<category> to a
C<tags> table.)

Position your cursor right after:

  use MyWeblog::Record schema {

Add the lines:

  column title =>
        type is 'text',
        label is 'Title',
        default is 'Untitled post';

  column body => 
        type is 'text',
        label is 'Content',
        render_as 'Textarea';

Save your model class.

=head2 Starting the Jifty application server

You now have a working, if simplistic, application. Start up the Jifty web
server by typing C<jifty server>.

The first thing you'll see is that Jifty notices you have no database, so it
creates one for you. By default, Jifty sets up your application with the SQLite
database engine. If you'd rather use PostgreSQL or MySQL, you need to add some
content to F<etc/config.yml>. (See L<Jifty::Config> for a bit more
information.)

    # jifty server
    WARN - Application schema has no version in the database.
    WARN - Automatically creating your database.
    INFO - Generating SQL for application MyWeblog...
    INFO - Using MyWeblog::Model::Post, as it appears to be new.
    INFO - Using Jifty::Model::Session, as it appears to be new.
    INFO - Using Jifty::Model::Metadata, as it appears to be new.
    INFO - Set up version 0.0.1, jifty version 0.81208
    INFO - You can connect to your server at http://localhost:8888/

Everything but the last line was database setup information that you'll only
see when Jifty changes your database.

The last line tells you the URL you can go to with your web browser. Have a
look around. Be sure to check out the AJAX-enabled administrative UI, the
online documentation browser, and the Pony.

For some platforms, you may have to type "./bin/jifty server".

=head2 Building a user interface

The administrative web does give you everything you need to work with your
application's data. You can create, update, and delete posts. However, it's not
much of a weblog.

=head3 Posting

Let's start building our user interface with a page to create new posts.

Open a new file called F<lib/MyWeblog/View.pm> in your text editor. Make it
look like this:

  package MyWeblog::View;
  use strict;
  use warnings;
  use Jifty::View::Declare -base;
  
  template post => page { title => 'Post Entry' } content {
      my $action = new_action(class => 'CreatePost');
  
      form {
          render_action $action;
          form_submit(label => 'Post');
      }
  };
  
  1;

=head3 Viewing

It's really easy to get a I<basic> listing of entries and a little bit more
complex to get a pretty AJAXified paged list.  Here's how to do both; you can
decide which one works best for you.

=head4 The quick and dirty way

Open your F<lib/MyWeblog/View.pm> file and add this between the C<post>
template and the "1;" at the very end of the file:

  template '/' => page {
      # Get all posts.
      my $posts = MyWeblog::Model::PostCollection->new;
      $posts->unlimit;
  
      # Display each post in a <dl>.
      dl {
          while (my $post = $posts->next) {
              dt { $post->title }
              dd { $post->body  }
          }
      }
  };

Now when you go to C<http://localhost:8888>, you'll be greeted with all of
your blog posts.

=head4 The complex way that gets you lots of cool toys

The I<complex way> involves using one of Jifty's advanced features:
I<Page regions>. These regions let your application reload page sections
independently, either using AJAX on modern high-end browsers or regular GET
requests with downlevel browsers such as C<lynx> and C<w3m>.

The downside of this approach is that each separate region needs to live in
its own template. Happily, this is a good design practice even without regions.

The complex way starts off about the same as the easy way. Replace (or add, if
you shied away from simplicity) the '/' template in your
F<lib/MyWeblog/View.pm>:

  template '/' => page {
      render_region(
          name => 'myweblog-posts',
          path => '/fragments/page_of_posts',
      );
  };

If you're on the ball, you've probably already guessed that you need to create
a template called C</fragments/page_of_posts>. Make it contain the following:

  template '/fragments/page_of_posts' => sub {
      # Retrieve the current page argument, defaulting to 1.
      my $page = get('page') || 1;
      
      # Get all posts.
      my $posts = MyWeblog::Model::PostCollection->new;
      $posts->unlimit;
      
      # Display up to three posts on the current page.
      $posts->set_page_info(
          current_page => $page,
          per_page     => 3,
      );
  
      # Notify the user what page they're on if there are multiple.
      if ($posts->pager->last_page > 1) {
          p { "Page $page of " . $posts->pager->last_page }
      }
  
      # Display the current page of posts.
      dl {
          attr { class => 'list' };
  
          while (my $post = $posts->next) {
              dt { $post->title }
              dd { $post->body  }
          }
      };
  
      # Previous page link, the 'page' argument here will set a new value when
      # this region is invoked again.
      if ($posts->pager->previous_page) {
          hyperlink(
              label => 'Previous Page',
              onclick => {
                  args => {
                      page => $posts->pager->previous_page,
                  },
              },
          );
      }
  
      # Next page link.
      if ($posts->pager->next_page) {
          hyperlink(
              label => 'Next Page',
              onclick => {
                  args => {
                      page => $posts->pager->next_page,
                  },
              },
          );
      }
  };

Now fire up your Jifty webserver again. Browse to C</post> and create more than
three posts. Return to the home page and check out the nifty AJAX C<Next Page>
and C<Previous Page> links you now have. Turn off javascript or view the page
in C<lynx>, and notice how the AJAX automatically falls-back to page loads for
you. All for free, thanks to Jifty!

=head3 Hey, where'd that class come from?

You may have wondered about C<MyWeblog::Model::PostCollection>, since there's
no file called F<PostCollection.pm>. Jifty uses C<Jifty::ClassLoader> to
auto-generate a bunch of classes for you. Of course, you can override these
definitions if you like. See L<Jifty::ClassLoader> for more details.

=head2 Navigation

Of course, having to remember the URL to get to the posting page is a bit
annoying. To get a B<Post> button in the menu, you need to override the default
menus.

We're going to set up a dispatcher for your weblog. A dispatcher handles "doing
things" based on the URL of each incoming request. We can set up additional
menu items by adding them in a "before rendering any template" dispatcher rule.

Open up a new file called F<lib/MyWeblog/Dispatcher.pm> and stick this content
into it:

  package MyWeblog::Dispatcher;
  use strict;
  use warnings;
  use Jifty::Dispatcher -base;
  
  before '*' => run {
      my $top = Jifty->web->navigation;
      $top->child(Home => url => '/');
      $top->child(Post => url => '/post', label => 'Post Article');
  };
  
  1;

For more information about the menu system, see the documentation in
L<Jifty::Web::Menu>.

=head2 That's it!

That's just about everything you need to get started building Jifty
applications.  We're working hard to make Jifty even easier to use and
to obsolete the I<hard bits> of this tutorial as quickly as we can.

Please join us on the C<jifty-devel> mailing list to talk about how you're
using Jifty or what you find difficult or hard to use about it.

=head1 MORE TUTORIALS

=over 4

=item * Managing your datastore

L<Jifty::Manual::Models>

=item * Doing Stuff With Jifty

L<Jifty::Manual::Actions>

=item * Using page regions

L<Jifty::Manual::PageRegions>

=item * CSS and JS

L<Jifty::Manual::UsingCSSandJS>,
L<Jifty::Manual::JavaScript>

=item * Web Services

See L<Jifty::Manual::TutorialRest> for a quick overview.

=item * Continuations - "There And Back Again"

L<Jifty::Manual::Continuations>

=item * Access Control and Security

L<Jifty::Manual::AccessControl>

=item * Deploying your application in production

L<Jifty::Manual::Deploying>

=item * Upgrading your application's data model

L<Jifty::Manual::Upgrading>

=item * Recipes for common tasks in Jifty

L<Jifty::Manual::Cookbook>

=back

=head1 GETTING HELP

=head2 Online Help

The C<jifty> command-line application comes with builtin help.

  jifty help

  jifty help <command>

If your server is running with administration mode enabled (the
configuration file C<AdminMode> setting is missing or non-zero), you can
click the "Online Docs" link in your browser for an extensive list of
per-module Jifty documentation.

=head2 Joining the mailing list

C<jifty-devel@lists.jifty.org> is where we discuss how we're building Jifty,
what we're having trouble with and so on.

To join the list, send mail to C<jifty-devel-subscribe@lists.jifty.org>.

=head2 Browsing the wiki

We have a wiki! (Actually, the wiki is Jifty's primary website)

Please visit L<http://jifty.org/>, browse and contribute.

The wiki is powered by I<Wifty>, a Wiki built on Jifty. Its code is freely
available from the Jifty subversion repository.

=head1 REPORTING BUGS

Please report bugs in Jifty to C<jifty-devel@lists.jifty.org>.

=cut
