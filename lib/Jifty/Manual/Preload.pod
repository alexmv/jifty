=head1 NAME

Jifty::Manual::Preload - One Path to a Snappy UI

=head1 DESCRIPTION

Preloading lets you optimistically load regions before they are to be
displayed. This improves user experience because preloaded updates are
effectively instant; the user does not wait for an HTTP request/response cycle.
The request/response cycle still happens, but it happens behind the scenes
while the user is filling out the form or reading the current page.

=head1 WARNING

Preloading is applicable only if your use case fulfills a specific set of
constraints.

The region you are preloading must I<not> depend greatly on the actions
submitted by the current page. For example, you cannot sanely preload a region
which includes the content of a textarea that the user is typing in the current
page.

On the other hand, the click of a button may be preloadable depending on what
the button does. We use a nice tactic in Changelogger
(L<http://changelogger.bestpractical.com>) to preload vote buttons. We need to
know which change to display to the user next, which is a nontrivial amount of
database work. When rendering a button, we begin a transaction, submit a fake
vote action, choose the next change, then rollback the transaction. This turns
out to be a fairly simple way to figure out what to display next for
preloading.

Preloading should also be agnostic of real-world time. If you preload a region
that contains a timestamp, then that timestamp may be stale by the time the
region is actually shown. Similarly for displaying duration. For example, at
the end of Hiveminder's task review, we tell you exactly how long you spent in
the review. This final report update cannot be preloaded because the user may
spend ten minutes on the last task.

Preloading can cause additional server load. Instead of a single request
containing action submission and region updates, preloading sends a request
containing action submission, then a request for each region update handler.
The overhead of each request is probably nontrivial. However, the cost of
preloading is probably worth it to improve user experience.

Finally, preloading is pretty new. It has not been battle tested. There may be
serious race conditions that result in inconsistencies that confound your
users. There may be data loss. It may interact strangely with other Jifty
features. These things would be very difficult to debug.

Good luck!

=head1 USAGE

To mark a form element as preloadable, use the C<< preload => 'cache_key' >>
option:

    form_submit(
        onclick => {
            submit       => $vote,
            preload      => 'vote',
            refresh_self => 1,
            arguments    => {
                change => $next_change->id,
            },
        },
    );

This marks the onclick handler as preloadable. When this button is I<rendered>,
the user's web browser will request this region immediately. When this button
is button is I<clicked>, the user's web browser will instantly refresh the
region without having to send an AJAX request and wait for the response.

The value of C<preload> is a cache key. This lets you reuse the same cache for
preloaded regions. For example, if you're going to display ten vote buttons,
then ordinarily you would make ten preload requests. However, if you give all
of the buttons the C<vote> cache key, only one preload request will be made.
Obviously this means that the specific button being clicked should not matter.
If you have a "undo vote" button which sends you backwards, you would not want
to preload that with the same cache key as regular votes. In fact, you probably
do not want to preload it all if it's a rare occurrence.

Note that the C<$vote> action is submitted well after the next region has been
preloaded!

=head1 GORY DETAILS

=cut

