=head1 NAME

Jifty::Manual::Tutorial -- Zero to Jifty in a Jiffy

=head1 DESCRIPTION

This tutorial should give you everything you need to 
build your first application with Jifty.

=cut

=head1 HOW TO

=head2 The requirements

=head2 Installing Jifty

No bones about it. We believe pretty strongly in the DRY (Don't Repeat
Yourself) principle. That's one of the big reasons we love Perl and
CPAN. Jifty makes use of lots of amazing code from CPAN.  At last count,
it directly depended on 60 packages from CPAN.  Most of these libraries
are cross-platform pure-perl packages and should run great out of the
box on any platform you can get Perl onto.

We've gone to lengths to make sure you don't spend your day downloading
library after library by bundling everything we can inside the Jifty
package.  With luck, all you'll need to install is a few tricky libraries
that actually need to be compiled for your operating system. (Little
things like perl's database interface and the embedded SQLite that Jifty
defaults to.)

You can either grab a complete Jifty package from http://jifty.org/download
or install from CPAN. If you get the "slim" version from CPAN, you'll have
to install Jifty's dependencies yourself. (Though we help out with that 
where we can.)  If you want to get up and running quickly, grab:

    http://download.jifty.org/pub/jifty/jifty-latest.tgz

Either way, the installation process is the same:
  
  # tar xzvf jifty-<version>tgz
  # cd jifty-version
  # perl Makefile.PL
  # make
  # make test
  # make install
 
If the tests don't pass, we want to hear about it. Please join us
on jifty-devel@lists.jifty.org and report the failure. (See 
"Getting Help" below for info on how to join the list.)


=head2 Setting up the Scaffolding

Once you have Jifty happily installed, you're ready to 
create your first application. 

Jifty is intentionally a bit minimalist. All you I<really>
need to make an application go is a copy of the C<jifty> commandline
tool (inside your new application's C<bin/> directory.  

Of course, it's often helpful to have a bit more structure around to
help guide your work. Jifty comes with tools to build that structure for
you:

Change directory to some place it will be safe to create a new
Jifty application. (Jifty will create a subdirectory for you).

  # jifty app --name MyWeblog

  Creating new application MyWebLog
  Creating directory bin
  Creating directory etc
  Creating directory doc
  Creating directory log
  Creating directory web
  Creating directory web/templates
  Creating directory web/static
  Creating directory lib
  Creating directory lib/MyWebLog
  Creating directory lib/MyWebLog/Model
  Creating directory lib/MyWebLog/Action
  Creating directory t
  
Let's take those one by one

=over

=item bin

Inside C<bin/>, you'll find  C<jifty>, the Jifty command dispatcher. Some
of the most important commands are C<schema>, which sets up or updates
your database schema and C<server>, which starts u a standalone
webserver.To find out what commands your C<jifty> comes with, run:

    C<jifty help>

=item etc

Configuration files live in C<etc/>, though if you don't have a config
file, Jifty will supply some sane defaults

=item doc

Jifty won't magically write your documentation for you, but when B<you>
write your docs, you should drop them in C<docs/>.


=item log

Jifty uses L<Log::Log4perl> to configure its logging. By default, it
dumps logs named C<server.log> and C<error.log> into C<log>


=item web/templates

Jifty uses L<HTML::Mason> as its primary templating system. You should
drop your application's templates into C<web/templates/>.  Out of the
box, Jifty comes with an application "skeleton" that it installs in
C</usr/local/share/jifty>web/templates/>.  This default application is
a convenient way to get a basic application up and running quickly,
but probably wants some customization as you build a more advanced
application.

=item web/static

Some nontrivial percentage of the "stuff"  your web application serves
out doesn't need to be (or I<shouldn't> be) passed through your templating
engine.

Just drop your static files into C<web/static/> and Jifty will serve
them out if it can't find a template with the right name.

Out of the box, Jifty comes with a CSS style, Javascript libraries and
a Pony. Have a look in /usr/local/share/jifty/web/static.


=item lib/MyWebLog

For a full treatment of the Jifty object model see
L<Jifty::Manual::ObjectModel>.

To build a basic Jifty application, you only need to worry about two
sorts of classes, B<Models> and B<Actions>.

=item lib/MyWebLog/Model

The real base of your application lives in
C<lib/B<AppName>/Model>. Classes here define your application's data
structures and how they relate to each other.  Jifty will use your model
classes to set up and upgrade your database's schema when it needs to.


=item lib/MyWebLog/Action

When we said you only need to worry about B<Models> and B<Actions>,
we weren't telling the whole truth.  Jifty will take care basic
database-interaction (C<CREATE, READ, UPDATE, DELETE>) B<Actions> for
your B<Models>, but they're there if you want to change anything.)

=item t

Jifty starts off your application with a basic harness, but can't yet write 
all your tests for you. (It does, however, build up simple for model classes
you generate.)


=back

=head2 Building your data model

=head2 Setting up the database

=head2 Starting the Jifty application server

=head2 Exploring your new (default) application

=head2 Building a user interface

=head2 Deploying your application in production

=head1 GETTING HELP

=head2 Joining the mailing list

=head2 Browsing the wiki


=head1 FUTURE TUTORIALS

=head2 Upgrading your application's data model

=head2 Access Control

=head2 Web Services

=head2 Continuations in depth

=cut
