<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="chrome://global/skin/" type="text/css"?><?xml-stylesheet href="takahashi.css" type="text/css"?><page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" id="presentation" xmlns:html="http:/www.w3.org/1999/xhtml" orient="vertical" onkeypress="Presentation.onKeyPress(event);">
<html:textarea id="builtinCode" style="visibility: collapse">

&#9832; Jifty
----
Jesse Vincent
 
 
  

 
»|« Best Practical
jesse@bestpractical.com
----
Nifty Apps
in a Jiffy
~ あっという間にJifty
----
{{img src="#" width="0" height="0"}}
{{img src="pony.png" width="640" height="422"}}
----
How we're building useful applications
in Perl 5 with a single unified framework, 
using less time, energy, code, blood, 
sweat, tears, etc.
----
Another
framework?
~ またフレームワーク？
----
Yes.
~ そう
----
(Sorry, clkao)
~ clkaoごめん
----
Why?
~ なぜ？
----
We're 
crazy?
~ 頭大丈夫？
----
We like
pain?
~ マゾなんじゃないの？
----
No!
~ 違います！
----
Dear God, 
WHY?!?!?!
----
We built RT
from scratch
----
RT has lots of 
infrastructure
----
We're building a 
new application
----
We learned
our lesson
----
This time, we'd
use a framework
----
We looked at
the options
----
We looked at
Maypole
----
We looked at
Catalyst
----
We looked at
Rails
----
We looked at
Seaside
----
We looked at
Java stuff
----
(We ignored the
Java stuff)
----
We looked at
Borges
----
We looked at
CGI::Application
----
We looked at
10+ more
----
Everything had
good ideas
----
Maypole's
default app
----
Catalyst's
Dispatcher
----
Rails'
Stack
----
Rails'
Beauty
----
Seaside's 
Continuations
----
Seaside's
Page Halos 
----
But...
----
Nothing met
our needs
----
Maypole isn't
easy enough
----
Catalyst is 
too scattered
----
Rails 
isn't 
Perl

Please translate as 
"Matz-san, Please 
accept my apologies. 
Ruby is a beautiful 
language, but I am 
addicted to Perl"
----
Seaside is
Smalltalk
----
Seaside is
space alien
----
Java is 
Java
----
We threw away
the bad stuff
----
We stole the
good stuff
----
We added 
our own magic
----
We have lots 
of cool stuff!
----
...but
----
Jifty is still
missing many
features
----
:-(
~ &#9785;
----
No 
Java
----
No 
Ruby
----
No
XML
----
No
SQL
----
I'm serious
----
No
SELECT
----
No
INSERT 
----
No
DELETE
----
No
UPDATE
----
No
CREATE
TABLE
----
No
ALTER
TABLE
----
No
Class::DBI
----
No
Template
Toolkit
----
No hand-built
HTML forms
----
No 
YAML
----
That's 
a lie
----
There's a little
bit of YAML
----
config.yml
----
(It's optional)
----
Sometimes not having
things is a feature
----
{{#tag|BUZZWORDS}}
----
{{#i|Perl}}
----
(obviously)
----
{{#i|Full}}
{{#i|Stack}}
----
(Fits together
top to bottom)
----
{{#i|Don't}}
{{#i|Repeat}}
{{#i|Yourself}}
----
(Say it once)
----
Even better:
(Never say it!)
----
{{#i|Declarative}}
{{#i|Programming}}
----
(Easy to read
and write)
----
{{#i|Encapsulated}}
{{#i|cleverness}}
----
(One good place
for your logic)
----
{{#i|Web 2.0}}
----
Sure 
it is
----
What does
it mean?
----
My DOG
is Web 2.0
enabled
----
Go ahead 
----
Prove me 
wrong
----
{{#i|Web}}
{{#i|Services}}
----
(Serve your API
to the world)
----
{{#i|AJAX}}
----
(And it works
in lynx, too)
----
{{#i|Continuations}}
----
('gosub' for web 
applications)
----
{{#i|MVC}}
----
(Sort of)
----
{{#i|A Pony}}
----
Rails is
anti-pony
----
{{img src="pony.png" width="640" height="422"}}
----
{{#tag|WHAT'S WITH}}
{{#tag|THE NAME?}}
----
Jifty
----
JFDI
----
JUST
----
_______

~ If not offensive, please use the Kana for "fucking"
----
DO
----
IT
----
Bad
Product
Name
----
Big Sites
Hate It
----
Learned the
hard way
----
 {{#tag|R}}equest
  
  
 
~
----
 {{#tag|R}}equest
 {{#tag|T}}racker
  
  
~  
----
 {{#tag|R}}equest
 {{#tag|T}}racker
 {{#tag|F}}AQ
  
~
----
 {{#tag|R}}equest
 {{#tag|T}}racker
 {{#tag|F}}AQ
 {{#tag|M}}anager
~
----
So, it's 
named Jifty!
----
{{#tag|MODELS}}
----
Models
are 
Jifty::DBI
----
Models
are 
smart
----
Models
encapsulate
cleverness
----
Models 
define
schema
----
 column complete =>
   type is 'boolean',
   default is 'false',
   label is 'Done';
----
  column summary =>
   type is 'varchar',
   label is 'Task',
   hints is '(Example: Get milk)';
----
Schema 
versioning
----
  column description =>
   since '0.1.1',
   type is 'text',
   render_as 'Textarea',
   label is 'Details';
----
Validation
----
  column priority =>
   type is 'integer',
   default is 3,
   valid_values are 
     { display => 'high',    value => 4 },
     { display => 'normal',  value => 3 },
     { display => 'low',     value => 2 };

----
Models
have
relationships
----
  column tags =>
   label is 'Tags',
   refers_to MyApp::Model::TaskTagCollection
             by 'task_id';
----
  column owner_id =>
   refers_to MyApp::Model::User,
   since '0.2.0',
   render_as 'Combobox';
----
That's 
pure
Perl
----
(No 
source 
filters)
----
What about 
the database?
----
 jifty schema --setup
----
What about
upgrades?
----
 jifty schema --setup
----
Another 
OO RDBMS 
Mapper?
----
Yes
----
Ok...No
----
Built on
SearchBuilder
----
{{#tag|ACTIONS}}
----
Actions are
your controllers
----
Any action
on any page
----
Repeatable
----
Composable
----
Actions
have
arguments
----
Arguments
have 
types
----
Jifty renders
actions
as forms
----
No more &lt;input&gt;
tags everywhere
----
Automatic
validators
----
(If you
want them)
----
Automatic
canonicalizers
----
(If you
want them)
----
Actions
return
results
----
Actions 
=
API
----
Not web 
services
...yet
----
Missing
results 
display
----
That's 
just a
serializer
----
(Added the 
serializer 
last week)
----
{{#tag|DISPATCHER}}
----
Centralized
Control Flow
----
Not actually
necessary
----
Separates
flow and
templates
----
{{#tag|REGIONS}}
----
AJAX 
page
updates
----
Standardized
----
Addressable
----
Downlevel
compatible
----
  Jifty->web->form->submit(
    label   => 'Create',
    onclick => [
      { submit => $action },
      { refresh => "someplace" },
    ],
  );
----
{{#tag|CONTINUATIONS}}
----
They're 
not real
----
Jifty level,
not 
Perl level
----
Save state
for later
----
Back button
compatible
----
{{#tag|DEVELOPER}}
{{#tag|MODE}}
----
Mason reloads 
changed templates
per request
----
Jifty reloads
changed {{#i|libraries}}
per request
----
Halos
----
Real-time
info about
the page
----
SQL queries
----
Actions +
Arguments
----
Profiling
----
Live 
editing
----
XXX image goes here
----
{{#tag|Other}}
{{#tag|Checklist}}
{{#tag|Features}}
----
Sending 
Email
----
Receiving 
Email
----
URL-based 
authentication
----
Password-based
authentication
----
Standalone
web server
----
FastCGI 
handler
----
Fast static
content 
server
----
Online
developer
documentation
----
Built-in
database
administration
----
Stub 
generators
----
Test 
helpers
----
{{#tag|A TRIVIAL}}
{{#tag|EXAMPLE}}
----
Real
code
----
Live
demo?
----
I know
better
----
 lib/BlogDemo/Model/Entry.pm
 lib/BlogDemo/Dispatcher.pm
 web/templates/new_entry.html
 web/templates/index.html
----
{{#i|./lib/BlogDemo/Model/Entry.pm}}
----
 package BlogDemo::Model::Entry::Schema;
 use Jifty::DBI::Schema;
 
 column title =&gt;
      type is 'text',
      default is 'Untitled';
 
 column body =&gt;
      type is 'text',
      render_as 'Textarea';

----
 package BlogDemo::Model::Entry;
 use base qw/BlogDemo::Record/;
----
{{#i|./lib/BlogDemo/Dispatcher.pm}}
----
 package BlogDemo::Dispatcher;
 use Jifty::Dispatcher -base;
 
 on '/' =&gt; run {
     my $entries = 
        BlogDemo::Model::EntryCollection-&gt;new();
     $entries-&gt;unlimit();
 
     set entries =&gt; $entries;
 };
---- 
 on '/new_entry.html' =&gt; run {
     my $create = Jifty-&gt;web-&gt;new_action(
         class   =&gt; 'CreateEntry',
         moniker =&gt; 'create');
 
     set create =&gt; $create;
 };
----
{{#i|./web/templates/new_entry.html}}
----
 &lt;%args&gt;
 $create
 &lt;/%args&gt;
 &lt;&amp;|/_elements/wrapper, 
    title=&gt; 'Create an article' &amp;&gt;
 &lt;%Jifty-&gt;web-&gt;form-&gt;start%&gt;
 % foreach my $arg ($create-&gt;argument_names) {
 &lt;%$create-&gt;form_field($arg)%&gt;
 % }
 &lt;%Jifty-&gt;web-&gt;form-&gt;submit( label =&gt; 'Save')%&gt;
 &lt;%Jifty-&gt;web-&gt;form-&gt;end%&gt;
 &lt;/&amp;&gt;
 ----
{{#i|./web/templates/index.html}}
----
 &lt;%args&gt;
 $entries
 &lt;/%args&gt;
 &lt;&amp;|/_elements/wrapper&amp;&gt;
 % while (my $entry = $entries-&gt;next) {
  &lt;h2&gt;&lt;%$entry-&gt;title%&gt;&lt;/h2&gt;
  &lt;div class="body"&gt;
    &lt;%$entry-&gt;body%&gt;
  &lt;/div&gt;
 % }
 &lt;/&amp;&gt;
----
 jifty schema --setup
 jifty server 
----
ALL DONE
----
No 
more 
code
----
It runs
----
Ship it
----
{{#tag|JIFTY}}
{{#tag|SUCKS}}
----
...for now
----
A few CPAN
Dependencies
----
Apache::Session App::CLI Cache::Cache Calendar::Simple
Class::Accessor Class::Container Clone Compress::Zlib DBD::SQLite
Data::Page Digest::MD5 Email::Folder Email::LocalDelivery Email::Send
Email::Simple Email::Simple::Creator Encode File::MMagic File::ShareDir
HTML::Entities HTML::Mason HTML::Mason::Plugin HTTP::Cookies HTTP::Date
HTTP::Server::Simple HTTP::Server::Simple::Recorder Hash::Merge
Hook::LexWrap Jifty::DBI Locale::Maketext::Simple Log::Log4perl
LWP::UserAgent MIME::Types Module::CoreList Module::Install::Admin
Module::Pluggable Module::Refresh Params::Validate Pod::Simple
Scalar::Util String::Koremutake Test::Base Test::HTML::Lint
Test::HTTP::Server::Simple Test::More Test::Pod::Coverage
Test::WWW::Mechanize Time::HiRes Time::ParseDate UNIVERSAL::require URI
WWW::Mechanize XML::Writer XML::XPath
----
Fixing
that
----
No Plugin
Architecture
----
Fixing
that
too
----
No I18N
----
Audrey has 
fixed it 
on her branch
----
{{#tag|THE FUTURE}}
----
Wiki-style
UI Editor
----
Even
less
code
----
More
docs
----
Sample
apps
----
"Jifty in a Jiffy"
movies and
music videos
----
{{#tag|GET JIFTY}}
----
 cpan Jifty
----
 svn co
   http://svn.jifty.org/svn/jifty.org
----
 http://jifty.org/
----
How do I get started
----
  perldoc Jifty::Manual::Tutorial
----
  perldoc Jifty::Manual::Tutorial_ja
  (thanks to Kenichi Ishigaki)
----
#jifty on freenode.net
----
jifty-devel@lists.jifty.org
----
Thanks!
----
Autocompleters
Canonicalizers
Actions
LetMes
</html:textarea>
<deck flex="1" id="deck">
<vbox flex="1" onmousemove="Presentation.onMouseMoveOnCanvas(event);">
<toolbox id="canvasToolbar">
<toolbar>
<toolbarbutton oncommand="Presentation.home()" label="|&lt;&lt;" observes="canBack"/>
<toolbarbutton oncommand="Presentation.back()" label="&lt;" observes="canBack"/>
<toolbarbutton oncommand="Presentation.forward()" label="&gt;" observes="canForward"/>
<toolbarbutton oncommand="Presentation.end()" label="&gt;&gt;|" observes="canForward"/>
<toolbarseparator/>
<hbox align="center">
<textbox id="current_page" size="4" oninput="if (this.value) Presentation.showPage(parseInt(this.value)-1);"/>
<description value="/"/>
<description id="max_page"/>
</hbox>
<toolbarseparator/>
<vbox flex="2">
<spacer flex="1"/>
<scrollbar id="scroller" align="center" orient="horizontal" oncommand="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));" onclick="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));" onmousedown="Presentation.onScrollerDragStart();" onmousemove="Presentation.onScrollerDragMove();" onmouseup="Presentation.onScrollerDragDrop();"/>
<spacer flex="1"/>
</vbox>
<toolbarseparator/>
<spacer flex="1"/>
<toolbarseparator/>
<toolbarbutton id="toggleEva" label="Eva" type="checkbox" autoCheck="false" oncommand="Presentation.toggleEvaMode();"/>
<toolbarseparator/>
<toolbarbutton label="Edit" oncommand="Presentation.toggleEditMode();"/>
<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
</toolbar>
</toolbox>
<vbox flex="1" id="canvas" onclick="Presentation.onPresentationClick(event);">
<spacer flex="1"/>
<hbox flex="1">
<spacer flex="1"/>
<vbox id="content">
</vbox>
<spacer flex="1"/>
</hbox>
<spacer flex="1"/>
</vbox>
</vbox>
<vbox flex="1" id="edit">
<toolbox>
<toolbar>
<toolbarbutton label="New Page" oncommand="Presentation.addPage()"/>
<spacer flex="1"/>
<toolbarseparator/>
<toolbarbutton label="View" oncommand="Presentation.toggleEditMode();"/>
<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
</toolbar>
</toolbox>
<textbox id="textField" flex="1" multiline="true" oninput="Presentation.onEdit()"/>
<hbox collapsed="true">
<iframe id="dataLoader" onload="if (window.Presentation) Presentation.onDataLoad();"/>
</hbox>
</vbox>
</deck>
<broadcasterset>
<broadcaster id="canBack"/>
<broadcaster id="canForward"/>
</broadcasterset>
<commandset>
<command id="cmd_forward" oncommand="if (Presentation.isPresentationMode) Presentation.forward();"/>
<command id="cmd_back" oncommand="if (Presentation.isPresentationMode) Presentation.back();"/>
<command id="cmd_home" oncommand="if (Presentation.isPresentationMode) Presentation.home();"/>
<command id="cmd_end" oncommand="if (Presentation.isPresentationMode) Presentation.end();"/>
</commandset>
<keyset>
<key keycode="VK_ENTER"      command="cmd_forward"/>
<key keycode="VK_RETURN"     command="cmd_forward"/>
<key keycode="VK_PAGE_DOWN"  command="cmd_forward"/>
<key keycode="VK_RIGHT"      command="cmd_forward"/>
<key keycode="VK_DOWN"       command="cmd_forward"/>
<!--key keycode="VK_BACK_SPACE" command="cmd_back"/-->
<key keycode="VK_UP"    command="cmd_back"/>
<key keycode="VK_PAGE_UP"    command="cmd_back"/>
<!--
<key keycode="VK_BACK_UP"    command="cmd_back"/>-->
<!--
<key keycode="VK_BACK_LEFT"  command="cmd_back"/>-->
<key keycode="VK_HOME"       command="cmd_home"/>
<!--
<key keycode="VK_END"        command="cmd_end"/>-->
<key key="n" modifiers="accel" oncommand="Presentation.addPage();"/>
<key key="r" modifiers="accel" oncommand="window.location.reload();"/>
<key key="e" modifiers="accel" oncommand="Presentation.toggleEditMode();"/>
<key key="a" modifiers="accel" oncommand="Presentation.toggleEvaMode();"/>
</keyset>
<script src="takahashi.js" type="application/x-javascript" />
</page>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Takahashi-Method-based Presentation Tool in XUL.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - ***** END LICENSE BLOCK ***** -->


