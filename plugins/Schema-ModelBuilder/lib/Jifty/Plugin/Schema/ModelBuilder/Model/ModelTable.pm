use strict;
use warnings;

package Jifty::Plugin::Schema::ModelBuilder::Model::ModelTable;

use Jifty::Plugin::Schema::ModelBuilder::Model::ModelColumn;

use Jifty::DBI::Schema;
use Jifty::Record schema {
    column name =>
        type is 'text',
        label is 'Model Name',
        is mandatory;
    
    column model_since =>
        type is 'text',
        label is 'Since';

    column model_table =>
        type is 'text',
        label is 'Table name',
        hints is 'If given, overrides the default table name.';

    column model_brief_description =>
        type is 'text',
        label is 'Brief description column',
        hints is 'If given, overrides the "brief description" column (usually "name").';

#    column model_columns =>
#        refers_to Jifty::Plugin::Schema::ModelBuilder::Model::ModelColumnCollection by 'parent_table';
};

=head1 NAME

Jifty::Plugin::Schema::ModelBuilder::Model::Table - Model representing Jifty models

=head1 SYNOPSIS

 my $model = Jifty::Plugin::Schema::ModelBuilder::Model::Table->new;
 $model->create({
     name                    => 'SomeTable',
     model_since             => '0.0.3',
     model_table             => 'some_other_table_name_i_prefer',
     model_brief_description => 'title',
 });

 print "Name: ", $model->name,"\n";
 print "Since: ", $model->model_since,"\n";
 print "Table: ", $model->model_table,"\n";
 print "Description: ", $model->model_brief_description,"\n";

=head1 DESCRIPTION

The records stored in this table represent models that are automatically
generated by the plugin's classloader, L<Jifty::Plugin::Schema::ModelBuilder::ClassLoader>.

=cut

sub model_columns {
    my ($self) = @_;

    # XXX Very naughty! Hard-coded table name!
    my $columns = Jifty->app_class('Model', 'ModelColumnCollection');
    $columns->limit( column => 'parent_table', value => $self->id );

    return $columns;
}

=head1 AUTHORS

Andrew Sterling Hanenkamp E<lt>hanenkamp@cpan.orgE<gt>

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut


1;
